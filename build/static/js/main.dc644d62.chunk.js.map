{"version":3,"sources":["components/converters/GetDate.js","components/converters/WeatherIcon.js","components/WeatherCard.js","components/DailyWeather.js","components/converters/EpochToHour.js","components/HourChart.js","App.js","reportWebVitals.js","index.js"],"names":["GetDate","t","dt","Date","getDate","getMonth","WeatherIcon","id","console","log","WeatherCard","weather","showHourly","onClick","className","temp","day","feels_like","humidity","description","DailyWeather","dailyWeatherList","map","weatherdata","index","GetDay","EpochToHour","getHours","HourChart","weatherList","current","hours","temps","filter","e","push","data","labels","datasets","label","fill","backgroundColor","borderColor","color","options","scales","plugins","beforeDraw","chart","ctx","canvas","getContext","save","globalCompositeOperation","fillStyle","fillRect","width","height","restore","App","d","useState","undefined","setData","getTime","hourly","setHourly","useEffect","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","fetch","then","res","json","result","cod","daily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc644d62.chunk.js","sourcesContent":["const GetDate = (t) => {\r\n    var dt = new Date(t*1000)\r\n    var d = dt.getDate()\r\n    var m = dt.getMonth()\r\n    var time = d + \"/\" + m\r\n    return (\r\n        time\r\n    )\r\n}\r\n\r\nexport default GetDate\r\n","import { WiDaySunny, WiCloudy, WiWindy, WiDaySnow, WiRain, WiDayRain, WiThunderstorm } from \"react-icons/wi\"\r\n\r\n\r\nconst WeatherIcon = (id) => {\r\n    console.log(id)\r\n    \r\n    switch (id) {\r\n        case id === 800:\r\n            return <WiDaySunny/>\r\n\r\n        case id >= 200 && id <= 232:\r\n            return <WiThunderstorm/>  \r\n\r\n        case id >= 300 && id <= 321:\r\n            return <WiDayRain/>   \r\n        \r\n        case id >= 500 && id <= 531:\r\n            return <WiRain />\r\n    \r\n        case id >= 600 && id <= 622:\r\n            return <WiDaySnow/>\r\n    \r\n        case id >= 701 && id <= 781:\r\n            return <WiWindy/>\r\n    \r\n        case id >= 801 && id <= 804:\r\n            return <WiCloudy/>\r\n    \r\n        default:\r\n            return <WiDaySunny/>\r\n    }\r\n}\r\n\r\nexport default WeatherIcon\r\n","import GetDate from \"./converters/GetDate\"\r\nimport WeatherIcon from \"./converters/WeatherIcon\"\r\nimport { WiThermometer } from \"react-icons/wi\"\r\nimport { WiHumidity } from \"react-icons/wi\"\r\n\r\nconst WeatherCard = ({weather, showHourly}) => {\r\n    return (\r\n        <a onClick={() => showHourly(GetDate(weather.dt))}>\r\n        <div className='card'>\r\n        <h1>{GetDate(weather.dt)}</h1>\r\n        \r\n        <h3><WiThermometer/>{weather.temp.day}</h3>\r\n        <h4>Tempature feels like: {weather.feels_like.day}</h4>\r\n        <h3><WiHumidity/>{weather.humidity}</h3>\r\n        {WeatherIcon(weather.weather[0].id)}\r\n        <span> {weather.weather[0].description}</span>\r\n        </div>\r\n        </a>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default WeatherCard\r\n","import GetDay from './converters/GetDate'\r\nimport WeatherCard from './WeatherCard'\r\n\r\nconst DailyWeather = ({ dailyWeatherList, showHourly }) => {\r\n    console.log(dailyWeatherList)\r\n    return (\r\n        <>\r\n            {dailyWeatherList.map((weatherdata, index) => (\r\n                <WeatherCard key={GetDay(weatherdata.dt)} weather={weatherdata} showHourly={showHourly}/>\r\n            ))}\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default DailyWeather\r\n","import React from 'react'\r\n\r\nconst EpochToHour = (t) => {\r\n    var dt = new Date(t*1000)\r\n    var h = dt.getHours()\r\n    var time = h\r\n    return (\r\n        time\r\n    )\r\n}\r\n\r\nexport default EpochToHour","import { withTheme } from '@material-ui/core'\r\nimport { Line } from 'react-chartjs-2'\r\nimport EpochToHour from './converters/EpochToHour'\r\nimport GetDate from './converters/GetDate'\r\n\r\nconst HourChart = ({weatherList, current}) => {\r\n    var hours = []\r\n    var temps = []\r\n    weatherList.filter(weatherdata => GetDate(weatherdata.dt) === current).map(e => {\r\n        hours.push(EpochToHour(e.dt))\r\n        temps.push(e.temp)\r\n    })\r\n    \r\n    const data = {\r\n        labels: hours,\r\n        datasets: [\r\n          {\r\n            label: 'Tempature',\r\n            data: temps,\r\n            fill: false,\r\n            backgroundColor: '#FFFFFF',\r\n            borderColor: '#2D6E7E',\r\n            color: '#ff0000'\r\n          },\r\n        ],\r\n      };\r\n      const plugin = {\r\n        id: 'custom_canvas_background_color',\r\n        beforeDraw: (chart) => {\r\n          const ctx = chart.canvas.getContext('2d');\r\n          ctx.save();\r\n          ctx.globalCompositeOperation = 'destination-over';\r\n          ctx.fillStyle = '#2D6E7E';\r\n          ctx.fillRect(0, 0, chart.width, chart.height);\r\n          ctx.restore();\r\n        }\r\n      };      \r\n      const options = {\r\n        scales: {\r\n          \r\n        },\r\n      };\r\n\r\n      \r\n    return (\r\n        <div>\r\n            <Line data={data} options={options} plugins={plugin} width={1200} height={700}></Line>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HourChart\r\n","import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport GetDate from './components/converters/GetDate'\r\nimport DailyWeather from './components/DailyWeather'\r\nimport HourChart from './components/HourChart'\r\nimport HourlyWeather from './components/HourlyWeather'\r\n\r\nfunction App() {\r\n  var d = new Date()\r\n  const [data, setData] = useState(undefined)\r\n  const [hourly, setHourly] = useState(GetDate((d.getTime())/1000))\r\n  \r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      var lat = position.coords.latitude\r\n      var long = position.coords.longitude\r\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=alerts,minutely&appid=29c7a53dbed814effac1da056c8993eb&units=metric&lang=en`)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        console.log(result)\r\n        setData(result)\r\n      })\r\n    });\r\n      \r\n  }, [setData])\r\n\r\n  const updateHourly = (day) => {\r\n    setHourly(day)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <div className='dailyWeatherWrapper'>\r\n        {(data !== undefined && data.cod !== '400') ? (\r\n            <DailyWeather dailyWeatherList={data.daily} showHourly={updateHourly}/>\r\n        ) : (<div/>)}\r\n      </div>  \r\n\r\n      <div className='dailyWeatherWrapper'>\r\n        {(data !== undefined && data.cod !== '400') ? (\r\n          <HourChart weatherList={data.hourly} current={hourly}/>\r\n        ) : (<div/>)}\r\n      </div>\r\n    \r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}